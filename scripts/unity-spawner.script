function init(self)
	self.unit_size = 64
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is only called if 'Use Fixed Timestep' is enabled in the Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	print(GAME_WIDTH)
	if message_id == hash('spawn') then
		local pos = vmath.vector3(0, 0, 0)
		if message.side == hash('left') then
			pos = vmath.vector3(-self.unit_size, (message.line * self.unit_size) + self.unit_size / 2, 0)
		elseif message.side == hash('right') then
			pos = vmath.vector3(GAME_WIDTH + self.unit_size, (message.line * self.unit_size) + self.unit_size / 2, 0)
		end

		factory.create('/unity-spawner#unity-factory', pos, nil, {
			side = message.side
		}, 1)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function init(self)
	go.property('side', hash('left'))
	go.property('speed', 50)
	go.property('time_to_spawn', 2) -- seconds
	go.property('health', 10)
	go.property('attack_damage', 10) -- base modifier
	go.property('attack_speed', 2) -- seconds
	go.property('attack_accuracy', 80) -- percentage
	go.property('attack_critical', 1) -- percentage

	self.moving = true
	
	if self.side == hash('left') then
		self.dir = vmath.vector3(1, 0, 0)
	elseif self.side == hash('right') then
		sprite.set_hflip('.', true)
		self.dir = vmath.vector3(-1, 0, 0)
		physics.set_group('#collision', 'enemy')
		physics.set_maskbit('#collision', 'unity', true)
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end
end

function fixed_update(self, dt)
	-- This function is only called if 'Use Fixed Timestep' is enabled in the Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash('trigger_response') and message.enter then
		if self.attack_timer then
			return
		end

		self.moving = false

		self.attack_timer = timer.delay(self.attack_speed, true, function()
			if message.other_id == nil then
				timer.cancel(self.attack_timer)
				self.moving = true
			end
			
			damage = math.random(1, self.attack_damage)
			
			msg.post(message.other_id, 'damage', {
				damage = damage
			})
		end)
	elseif message_id == hash('trigger_response') and not message.enter then
		self.moving = true
		timer.cancel(self.attack_timer)
	end

	if message_id == hash('damage') then
		self.health = self.health - message.damage

		if self.health <= 0 then
			msg.post('.', 'disable')
			go.delete(true)
		end
		
		print('damage', message.damage, 'from', message.other_id)
	end

	if message_id == hash('refresh') then
		print(message.atlas)
		go.property('image', resource.atlas('/atlases/unities/' + message.atlas))
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

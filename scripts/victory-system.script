local List = require 'scripts.modules.list-utils'

function init(self)
	go.property('points_to_victory', 1000)

	self.points_counter = {}
	table.insert(self.points_counter, {
		side = hash('left'),
		points = 0
	})
	table.insert(self.points_counter, {
		side = hash('right'),
		points = 0
	})
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash('give-point') then
		local points = List.getInList(self.points_counter, 'side', hash(message.side), 'points') + message.points
		List.changeInList(self.points_counter, 'side', hash(message.side), 'points', points)
		print(hash(message.side), ' gained ', message.points, '! Total points: ', points)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
